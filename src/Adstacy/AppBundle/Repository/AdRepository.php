<?php

namespace Adstacy\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Adstacy\AppBundle\Entity\User;

/**
 * AdRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdRepository extends EntityRepository
{

    /**
     * Find $limit ads with id lower than $since
     *
     * @param integer|null $since
     * @param integer $limit
     *
     * @return array
     */
    public function findAdsSinceId($since, $limit = 30)
    {
        $em = $this->getEntityManager();
        $builder = $em->createQueryBuilder()
            ->select('p')
            ->from('AdstacyAppBundle:Ad', 'p')
            ->setMaxResults($limit)
            ->orderBy('p.id', 'DESC')
        ;
        if ($since) {
            $builder->andWhere('p.id < :id')
                ->setParameter('id', $since)
            ;
        }

        return $builder->getQuery()->getResult();
    }

    /**
     * Findl all by $user query
     *
     * @param User $user
     *
     * @return Query
     */
    public function findByUserQuery(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            LEFT JOIN a.promotees p
            WHERE u.id = :id OR p.id = :id
        ');

        return $query->setParameter('id', $user->getId());
    }

    /**
     * Find all ads by $user
     *
     * @param User $user
     *
     * @return array
     */
    public function findByUser(User $user)
    {
        return $this->findByUserQuery($user)->getResult();
    }

    /**
     * Count total ads by $user
     *
     * @param User $user
     *
     * @return integer
     */
    public function countByUser(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT COUNT(a.id)
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            WHERE u.id = :id
        ');

        return $query->setParameter('id', $user->getId())->getSingleScalarResult();
    }

    /**
     * Find promotes by $user query
     *
     * @param User $user
     *
     * @return Query
     */
    public function findPromotesByUserQuery(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a
            FROM AdstacyAppBundle:Ad a
            JOIN a.promotees p
            WHERE p.id = :id
        ');

        return $query->setParameter('id', $user->getId());
    }

    /**
     * Find promotes by $user
     *
     * @param User $user
     *
     * @return array
     */
    public function findPromotesByUser(User $user)
    {
        return $this->findPromotesByUserQuery($user)->getResult();
    }

    /**
     * Count number of promotes by $user
     *
     * @param User $user
     *
     * @return integer
     */
    public function countPromotesByUser(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT COUNT(a.id)
            FROM AdstacyAppBundle:Ad a
            JOIN a.promotees p
            WHERE p.id = :id
        ');

        return $query->setParameter('id', $user->getId())->getSingleScalarResult();
    }

    /**
     * Find user's stream Query
     *
     * @param User $user
     *
     * @return Query
     */
    public function findUserStreamQuery(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a, u, f, p
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            LEFT JOIN u.followers f
            LEFT JOIN a.promotees p
            WHERE u.id = :id OR f.id = :id OR p.id = :id
            ORDER BY a.created DESC
        ');

        return $query->setParameter('id', $user->getId());
    }
}
