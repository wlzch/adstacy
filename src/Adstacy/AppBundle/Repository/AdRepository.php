<?php

namespace Adstacy\AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Adstacy\AppBundle\Entity\User;
use Adstacy\AppBundle\Helper\Formatter;

/**
 * AdRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class AdRepository extends EntityRepository
{

    /**
     * Find $limit ads with id lower than $since
     *
     * @param integer|null $since
     * @param integer $limit
     *
     * @return array
     */
    public function findAdsSinceId($since, $limit = 10)
    {
        if ($since == null) {
            $since = 2000000000; // if no id, set it to a very high id
        }
        $em = $this->getEntityManager();
        $idsQuery = $em->createQuery("
            SELECT a
            FROM AdstacyAppBundle:Ad a
            WHERE a.id < :id
            ORDER BY a.id DESC
        ");
        $idsQuery->setMaxResults($limit)->setParameter('id', $since);
        $ids = array();
        foreach ($idsQuery->getResult() as $ad) {
            $ids[] = $ad->getId();
        }

        $rsm = $this->getNativeSqlMapping();

        if (count($ids) <= 0) {
            return array();
        }
        $ids = Formatter::arrayToSql($ids);
        $query = $em->createNativeQuery("
            SELECT a.*,
                u.id as u_id, u.username as u_username, u.imagename as u_imagename, u.real_name as u_real_name,
                u.profile_picture as u_profile_picture,
                c.id as c_id, c.content as c_content, c.created as c_created
            FROM ad a
            INNER JOIN users u ON u.id = a.user_id
            LEFT JOIN ad_comment c ON c.ad_id = a.id
            WHERE a.id IN $ids AND (
                a.comments_count = 0 OR (
                    a.comments_count > 0 AND c.id IN (
                        SELECT c0.id
                        FROM ad_comment c0
                        WHERE c0.ad_id = a.id
                        ORDER BY c0.created DESC
                        LIMIT 2
                    )
                )
            )
            ORDER BY a.id DESC
        ", $rsm);
        $ads = $query->getResult();

        return $ads;
    }

    /**
     * Find all by $user query join promotees
     *
     * @param User $user
     *
     * @return Query
     */
    public function findByPromoteQuery(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a,
            partial u.{id,username,imagename,realName,profilePicture}
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            LEFT JOIN a.promotees pa
            LEFT JOIN pa.user pu
            WHERE pu.id = :id AND a.active = TRUE
        ');

        return $query->setParameter('id', $user->getId());
    }

    /**
     * Find all promotes by $user
     *
     * @param User $user
     *
     * @return Query
     */
    public function findByUserJoinPromoteQuery(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a,
            partial u.{id,username,imagename,realName,profilePicture}
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            LEFT JOIN a.promotees pa
            LEFT JOIN pa.user pu
            WHERE u.id = :id OR pu.id = :id AND a.active = TRUE
        ');

        return $query->setParameter('id', $user->getId());
    }

    /**
     * Find $limit ads by $user
     *
     * @param User $user
     * @param integer limit
     *
     * @return Query
     */
    public function findByUserQuery(User $user, $limit = 20)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            WHERE u.id = :id AND a.active = TRUE
            ORDER BY a.created DESC
        ');
        $query->setMaxResults($limit);

        return $query->setParameter('id', $user->getId());
    }

    /**
     * Find $limit ads by $user
     *
     * @param User $user
     * @param integer limit
     *
     * @return array
     */
    public function findByUser(User $user, $limit = 20)
    {
        return $this->findByUserQuery($user, $limit)->getResult();
    }

    /**
     * Find user's stream Query
     *
     * @param User $user
     *
     * @return Query
     */
    public function findUserStreamQuery(User $user)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a,
            partial u.{id,username,imagename,realName,profilePicture}
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            JOIN u.followers fe
            LEFT JOIN a.promotees ap
            LEFT JOIN ap.user apu
            WHERE u.id = :id OR fe.id = :id OR apu.id = :id AND a.active = TRUE
            ORDER BY a.created DESC
        ');
        $query->useResultCache(true, 1800, 'AdFindUserStreamQuery');

        return $query->setParameter('id', $user->getId());
    }

    public function findTrendingPromotes($limit = 50)
    {
        $em = $this->getEntityManager();
        $rsm = $this->getNativeSqlMapping();
        $query = $em->createNativeQuery("
            SELECT a.*,
                u.id as u_id, u.username as u_username, u.imagename as u_imagename, u.real_name as u_real_name,
                u.profile_picture as u_profile_picture,
                c.id as c_id, c.content as c_content, c.created as c_created
            FROM ad a
            INNER JOIN users u ON a.user_id = u.id
            LEFT JOIN ad_comment c ON c.ad_id = a.id
            WHERE a.active = TRUE AND (
                a.comments_count = 0 OR (
                    a.comments_count > 0 AND c.id IN (
                        SELECT c0.id
                        FROM ad_comment c0
                        WHERE c0.ad_id = a.id
                        ORDER BY c0.created DESC
                        LIMIT 2
                    )
                )
            )
            ORDER BY a.promotees_count DESC
            LIMIT $limit
        ", $rsm);

        return $query->getResult();
    }

    /**
     * Find all ads with most promote since $since
     *
     * @param Datetime $since
     * @param integer limit
     *
     * @return array (0 => Ad, 1 => cnt)
     */
    public function findTrendingSince($since, $limit = 50)
    {
        $em = $this->getEntityManager();
        $query = $em->createQuery('
            SELECT a, u, c, COUNT(ap.created) as cnt
            FROM AdstacyAppBundle:Ad a
            JOIN a.user u
            JOIN a.promotees ap
            LEFT JOIN a.comments c
            WHERE ap.created >= :since AND a.active = TRUE
            GROUP BY a.id, u.id
            ORDER BY cnt DESC
        ');
        $query->setMaxResults($limit);
        $query->useResultCache(true, 3600, 'AdFindTrendingSince');

        return $query->setParameter('since', $since)->getResult();
    }

    private function getNativeSqlMapping()
    {
        $rsm = new ResultSetMapping();
        $rsm->addEntityResult('Adstacy\AppBundle\Entity\Ad', 'a');
        $rsm->addFieldResult('a', 'id', 'id');
        $rsm->addFieldResult('a', 'type', 'type');
        $rsm->addFieldResult('a', 'imagename', 'imagename');
        $rsm->addFieldResult('a', 'title', 'title');
        $rsm->addFieldResult('a', 'youtubeId', 'youtubeId');
        $rsm->addFieldResult('a', 'description', 'description');
        $rsm->addFieldResult('a', 'tags', 'tags');
        $rsm->addFieldResult('a', 'thumb_height', 'thumbHeight');
        $rsm->addFieldResult('a', 'image_width', 'imageWidth');
        $rsm->addFieldResult('a', 'image_height', 'imageHeight');
        $rsm->addFieldResult('a', 'promotees_count', 'promoteesCount');
        $rsm->addFieldResult('a', 'active', 'active');
        $rsm->addFieldResult('a', 'created', 'created');
        $rsm->addFieldResult('a', 'updated', 'updated');
        $rsm->addJoinedEntityResult('Adstacy\AppBundle\Entity\User', 'u', 'a', 'user');
        $rsm->addFieldResult('u', 'u_id', 'id');
        $rsm->addFieldResult('u', 'u_username', 'username');
        $rsm->addFieldResult('u', 'u_imagename', 'imagename');
        $rsm->addFieldResult('u', 'u_real_name', 'realName');
        $rsm->addFieldResult('u', 'u_profile_picture', 'profilePicture');
        $rsm->addJoinedEntityResult('Adstacy\AppBundle\Entity\Comment', 'c', 'a', 'comments');
        $rsm->addFieldResult('c', 'c_id', 'id');
        $rsm->addFieldResult('c', 'c_content', 'content');
        $rsm->addFieldResult('c', 'c_created', 'created');

        return $rsm;
    }
}
